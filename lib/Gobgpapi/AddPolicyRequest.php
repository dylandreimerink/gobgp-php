<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: gobgp.proto

namespace Gobgpapi;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>gobgpapi.AddPolicyRequest</code>
 */
class AddPolicyRequest extends \Google\Protobuf\Internal\Message
{
	/**
	 * Generated from protobuf field <code>.gobgpapi.Policy policy = 1;</code>
	 */
	private $policy = null;
	/**
	 * if this flag is set, gobgpd won't define new statements
	 * but refer existing statements using statement's names in this arguments.
	 *
	 * Generated from protobuf field <code>bool refer_existing_statements = 2;</code>
	 */
	private $refer_existing_statements = false;

	public function __construct()
	{
		\GPBMetadata\Gobgp::initOnce();
		parent::__construct();
	}

	/**
	 * Generated from protobuf field <code>.gobgpapi.Policy policy = 1;</code>
	 * @return \Gobgpapi\Policy
	 */
	public function getPolicy()
	{
		return $this->policy;
	}

	/**
	 * Generated from protobuf field <code>.gobgpapi.Policy policy = 1;</code>
	 * @param \Gobgpapi\Policy $var
	 * @return $this
	 */
	public function setPolicy($var)
	{
		GPBUtil::checkMessage($var, \Gobgpapi\Policy::class);
		$this->policy = $var;

		return $this;
	}

	/**
	 * if this flag is set, gobgpd won't define new statements
	 * but refer existing statements using statement's names in this arguments.
	 *
	 * Generated from protobuf field <code>bool refer_existing_statements = 2;</code>
	 * @return bool
	 */
	public function getReferExistingStatements()
	{
		return $this->refer_existing_statements;
	}

	/**
	 * if this flag is set, gobgpd won't define new statements
	 * but refer existing statements using statement's names in this arguments.
	 *
	 * Generated from protobuf field <code>bool refer_existing_statements = 2;</code>
	 * @param bool $var
	 * @return $this
	 */
	public function setReferExistingStatements($var)
	{
		GPBUtil::checkBool($var);
		$this->refer_existing_statements = $var;

		return $this;
	}

}

